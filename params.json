{"name":"One-Time-Pad Python","tagline":"A hacky implementation of One-time Pad in Python","body":"**One-Time-Pad Python is a command-line encryption tool**, which uses an encryption mechanism\r\nvery similar to [One-time Pad](https://en.wikipedia.org/wiki/One-time_pad) (Duh. Thanks for telling that)\r\n\r\nFeatures\r\n--------\r\n\r\n* It can be used as a python script, or can be imported as a module.\r\n* You can encrypt/decrypt data not only from stdin, but from a file too.\r\n* It is Open Source! :D\r\n\r\nInstallation\r\n------------\r\n\r\n1. Clone it:  \r\n```$ git clone https://github.com/jailuthra/onetimepad.git```\r\n2. Enter the clone directory:  \r\n```$ cd onetimepad/```\r\n3. Run it:\r\n```\r\n$ ./otp.py -h\r\nusage: otp.py [-h] [-d] [-f FILENAME]\r\n\r\nEncrypt or Decrypt data using One-Time Pad\r\n\r\noptional arguments:\r\n  -h, --help            show this help message and exit\r\n  -d, --decrypt         Decrypt data (default is to encrypt)\r\n  -f FILENAME, --file FILENAME\r\n                        File name to encrypt/decrypt\r\n```\r\n\r\nSecurity\r\n--------\r\n\r\n1. The crypted message is very easy to crack if the length of key is less than the length of message.\r\n2. In any case, the key is not nescessarily random, which makes this tool as good as a toy.\r\n3. Thus, do not encrypt any real private stuff, it won't protect you from the NSA. *It is just a hack*.\r\n\r\nCopying\r\n-------\r\n\r\nThis project is licensed under the terms of MIT LICENSE, please see LICENSE file for more details.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}